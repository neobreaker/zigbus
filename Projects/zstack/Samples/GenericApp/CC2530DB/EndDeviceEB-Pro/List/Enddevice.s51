///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        07/Sep/2017  15:36:33 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  F:\Download\第5章 zigbee协议栈应用与组网\3.基于Ge /
//                          nericApp无线收发实验\Projects\zstack\Samples\Gene /
//                          ricApp\Source\Enddevice.c                         /
//    Command line       =  -f "F:\Download\第5章 zigbee协议栈应用与组网\3.基 /
//                          于GenericApp无线收发实验\Projects\zstack\Samples\ /
//                          GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEn /
//                          dev.cfg" (-DCPU32MHZ -DROOT=__near_func           /
//                          -DBLINK_LEDS) -f "F:\Download\第5章               /
//                          zigbee协议栈应用与组网\3.基于GenericApp无线收发实 /
//                          验\Projects\zstack\Samples\GenericApp\CC2530DB\.. /
//                          \..\..\Tools\CC2530DB\f8wConfig.cfg" (-DSECURE=0  /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "F:\Download\第5章         /
//                          zigbee协议栈应用与组网\3.基于GenericApp无线收发实 /
//                          验\Projects\zstack\Samples\GenericApp\Source\Endd /
//                          evice.c" -D ZIGBEEPRO -D NWK_AUTO_POLL -D         /
//                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D             /
//                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D             /
//                          xPOWER_SAVING -lC "F:\Download\第5章              /
//                          zigbee协议栈应用与组网\3.基于GenericApp无线收发实 /
//                          验\Projects\zstack\Samples\GenericApp\CC2530DB\En /
//                          dDeviceEB-Pro\List\" -lA "F:\Download\第5章       /
//                          zigbee协议栈应用与组网\3.基于GenericApp无线收发实 /
//                          验\Projects\zstack\Samples\GenericApp\CC2530DB\En /
//                          dDeviceEB-Pro\List\" --diag_suppress Pe001,Pa010  /
//                          -o "F:\Download\第5章 zigbee协议栈应用与组网\3.基 /
//                          于GenericApp无线收发实验\Projects\zstack\Samples\ /
//                          GenericApp\CC2530DB\EndDeviceEB-Pro\Obj\" -e      /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I "F:\Download\第5章 zigbee协议栈应用与组网\3.基 /
//                          于GenericApp无线收发实验\Projects\zstack\Samples\ /
//                          GenericApp\CC2530DB\" -I "F:\Download\第5章       /
//                          zigbee协议栈应用与组网\3.基于GenericApp无线收发实 /
//                          验\Projects\zstack\Samples\GenericApp\CC2530DB\.. /
//                          \SOURCE\" -I "F:\Download\第5章                   /
//                          zigbee协议栈应用与组网\3.基于GenericApp无线收发实 /
//                          验\Projects\zstack\Samples\GenericApp\CC2530DB\.. /
//                          \..\..\ZMAIN\TI2530DB\" -I "F:\Download\第5章     /
//                          zigbee协议栈应用与组网\3.基于GenericApp无线收发实 /
//                          验\Projects\zstack\Samples\GenericApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\MT\" -I                   /
//                          "F:\Download\第5章 zigbee协议栈应用与组网\3.基于G /
//                          enericApp无线收发实验\Projects\zstack\Samples\Gen /
//                          ericApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\IN /
//                          CLUDE\" -I "F:\Download\第5章                     /
//                          zigbee协议栈应用与组网\3.基于GenericApp无线收发实 /
//                          验\Projects\zstack\Samples\GenericApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I  /
//                          "F:\Download\第5章 zigbee协议栈应用与组网\3.基于G /
//                          enericApp无线收发实验\Projects\zstack\Samples\Gen /
//                          ericApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\M /
//                          CU\CCSOC\" -I "F:\Download\第5章                  /
//                          zigbee协议栈应用与组网\3.基于GenericApp无线收发实 /
//                          验\Projects\zstack\Samples\GenericApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\OSAL\INCLUDE\" -I         /
//                          "F:\Download\第5章 zigbee协议栈应用与组网\3.基于G /
//                          enericApp无线收发实验\Projects\zstack\Samples\Gen /
//                          ericApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ /
//                          AF\" -I "F:\Download\第5章                        /
//                          zigbee协议栈应用与组网\3.基于GenericApp无线收发实 /
//                          验\Projects\zstack\Samples\GenericApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\STACK\NWK\" -I            /
//                          "F:\Download\第5章 zigbee协议栈应用与组网\3.基于G /
//                          enericApp无线收发实验\Projects\zstack\Samples\Gen /
//                          ericApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ /
//                          SEC\" -I "F:\Download\第5章                       /
//                          zigbee协议栈应用与组网\3.基于GenericApp无线收发实 /
//                          验\Projects\zstack\Samples\GenericApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\STACK\SAPI\" -I           /
//                          "F:\Download\第5章 zigbee协议栈应用与组网\3.基于G /
//                          enericApp无线收发实验\Projects\zstack\Samples\Gen /
//                          ericApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ /
//                          SYS\" -I "F:\Download\第5章                       /
//                          zigbee协议栈应用与组网\3.基于GenericApp无线收发实 /
//                          验\Projects\zstack\Samples\GenericApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\STACK\ZDO\" -I            /
//                          "F:\Download\第5章 zigbee协议栈应用与组网\3.基于G /
//                          enericApp无线收发实验\Projects\zstack\Samples\Gen /
//                          ericApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F /
//                          8W\" -I "F:\Download\第5章                        /
//                          zigbee协议栈应用与组网\3.基于GenericApp无线收发实 /
//                          验\Projects\zstack\Samples\GenericApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\ZMAC\" -I                 /
//                          "F:\Download\第5章 zigbee协议栈应用与组网\3.基于G /
//                          enericApp无线收发实验\Projects\zstack\Samples\Gen /
//                          ericApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVIC /
//                          ES\SADDR\" -I "F:\Download\第5章                  /
//                          zigbee协议栈应用与组网\3.基于GenericApp无线收发实 /
//                          验\Projects\zstack\Samples\GenericApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\SERVICES\SDATA\" -I       /
//                          "F:\Download\第5章 zigbee协议栈应用与组网\3.基于G /
//                          enericApp无线收发实验\Projects\zstack\Samples\Gen /
//                          ericApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\IN /
//                          CLUDE\" -I "F:\Download\第5章                     /
//                          zigbee协议栈应用与组网\3.基于GenericApp无线收发实 /
//                          验\Projects\zstack\Samples\GenericApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\" -I       /
//                          "F:\Download\第5章 zigbee协议栈应用与组网\3.基于G /
//                          enericApp无线收发实验\Projects\zstack\Samples\Gen /
//                          ericApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LO /
//                          W_LEVEL\srf04\" -I "F:\Download\第5章             /
//                          zigbee协议栈应用与组网\3.基于GenericApp无线收发实 /
//                          验\Projects\zstack\Samples\GenericApp\CC2530DB\.. /
//                          \..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGL /
//                          E_CHIP\" -Ohz --require_prototypes                /
//    List file          =  F:\Download\第5章 zigbee协议栈应用与组网\3.基于Ge /
//                          nericApp无线收发实验\Projects\zstack\Samples\Gene /
//                          ricApp\CC2530DB\EndDeviceEB-Pro\List\Enddevice.s5 /
//                          1                                                 /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME Enddevice

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??GenericApp_Init?relay
        FUNCTION ??GenericApp_Init?relay,0203H
        PUBLIC ??GenericApp_Loop?relay
        FUNCTION ??GenericApp_Loop?relay,0203H
        PUBLIC ??GenericApp_MessageMSGCB?relay
        FUNCTION ??GenericApp_MessageMSGCB?relay,0203H
        PUBLIC ??GenericApp_ProcessEvent?relay
        FUNCTION ??GenericApp_ProcessEvent?relay,0203H
        PUBLIC ??GenericApp_SendTheUart?relay
        FUNCTION ??GenericApp_SendTheUart?relay,0203H
        FUNCTION ??rxCB?relay,0203H
        PUBLIC GenericApp_ClusterList
        PUBLIC GenericApp_Init
        FUNCTION GenericApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        PUBLIC GenericApp_Loop
        FUNCTION GenericApp_Loop,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 35, STACK
        PUBLIC GenericApp_MessageMSGCB
        FUNCTION GenericApp_MessageMSGCB,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 146, STACK
        PUBLIC GenericApp_NwkState
        PUBLIC GenericApp_ProcessEvent
        FUNCTION GenericApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC GenericApp_SendTheUart
        FUNCTION GenericApp_SendTheUart,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 164, STACK
        PUBLIC GenericApp_SimpleDesc
        PUBLIC GenericApp_TaskID
        PUBLIC GenericApp_TransID
        PUBLIC GenericApp_epDesc
        PUBLIC dst_short_addr
        PUBLIC g_nwt_addr
        FUNCTION rxCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC uartbuf
        PUBLIC uartbuf_len
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
afRegister          SYMBOL "afRegister"
HalUARTOpen         SYMBOL "HalUARTOpen"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
osal_memset         SYMBOL "osal_memset"
osal_memcpy         SYMBOL "osal_memcpy"
HalUARTWrite        SYMBOL "HalUARTWrite"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
AF_DataRequest      SYMBOL "AF_DataRequest"
HalUARTRead         SYMBOL "HalUARTRead"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_memset?relay SYMBOL "?relay", osal_memset
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
GenericApp_Init     SYMBOL "GenericApp_Init"
??GenericApp_Init?relay SYMBOL "?relay", GenericApp_Init
GenericApp_Loop     SYMBOL "GenericApp_Loop"
??GenericApp_Loop?relay SYMBOL "?relay", GenericApp_Loop
GenericApp_MessageMSGCB SYMBOL "GenericApp_MessageMSGCB"
??GenericApp_MessageMSGCB?relay SYMBOL "?relay", GenericApp_MessageMSGCB
GenericApp_ProcessEvent SYMBOL "GenericApp_ProcessEvent"
??GenericApp_ProcessEvent?relay SYMBOL "?relay", GenericApp_ProcessEvent
GenericApp_SendTheUart SYMBOL "GenericApp_SendTheUart"
??GenericApp_SendTheUart?relay SYMBOL "?relay", GenericApp_SendTheUart

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 143, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 158, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 143, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 155, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 164, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H

// F:\Download\第5章 zigbee协议栈应用与组网\3.基于GenericApp无线收发实验\Projects\zstack\Samples\GenericApp\Source\Enddevice.c
//    1 #include "OSAL.h"
//    2 #include "AF.h"
//    3 #include "ZDApp.h"
//    4 #include "ZDObject.h"
//    5 #include "ZDProfile.h"
//    6 
//    7 #include "Common.h"
//    8 #include "DebugTrace.h"
//    9 
//   10 #if !defined( WIN32 )
//   11 #include "OnBoard.h"
//   12 #endif
//   13 
//   14 /* HAL */
//   15 #include "hal_lcd.h"
//   16 #include "hal_led.h"
//   17 #include "hal_key.h"
//   18 #include "hal_uart.h"
//   19 
//   20 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//   21 const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
GenericApp_ClusterList:
        DW 1
//   22 {
//   23     GENERICAPP_CLUSTERID
//   24 };
//   25 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   26 const SimpleDescriptionFormat_t GenericApp_SimpleDesc =
GenericApp_SimpleDesc:
        DB 10
        DATA16
        DW 3844
        DW 1
        DATA8
        DB 0
        DB 1
        DATA16
        DW GenericApp_ClusterList
        DATA8
        DB 1
        DATA16
        DW GenericApp_ClusterList
//   27 {
//   28     GENERICAPP_ENDPOINT,              //  int Endpoint;
//   29     GENERICAPP_PROFID,                //  uint16 AppProfId[2];
//   30     GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//   31     GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//   32     GENERICAPP_FLAGS,                 //  int   AppFlags:4;
//   33     GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//   34     (cId_t *)GenericApp_ClusterList,  //  byte *pAppInClusterList;
//   35     GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//   36     (cId_t *)GenericApp_ClusterList   //  byte *pAppInClusterList;
//   37 };
//   38 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   39 endPointDesc_t GenericApp_epDesc;
GenericApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   40 byte GenericApp_TaskID;
GenericApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   41 byte GenericApp_TransID;
GenericApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   42 devStates_t GenericApp_NwkState;
GenericApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   43 unsigned char uartbuf[UART_BUF_SIZE];
uartbuf:
        DS 128
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   44 uint16 uartbuf_len = 0;
uartbuf_len:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   45 nwk_addr_t g_nwt_addr;
g_nwt_addr:
        DS 8
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   46 uint16 dst_short_addr;
dst_short_addr:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   47 
//   48 void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//   49 void GenericApp_SendTheMessage( void );
//   50 void GenericApp_SendTheUart(unsigned char * buf, int len);
//   51 void GenericApp_Loop(unsigned char *buf, int len);
//   52 static void rxCB(uint8 port, uint8 event);
//   53 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   54 void GenericApp_Init( byte task_id )
GenericApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function GenericApp_Init
        CODE
//   55 {
        FUNCALL GenericApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,R1
//   56 
//   57     halUARTCfg_t uartconfig;
//   58 
//   59     GenericApp_TaskID = task_id;
        MOV     DPTR,#GenericApp_TaskID
        MOVX    @DPTR,A
//   60     GenericApp_NwkState=DEV_INIT;
        MOV     DPTR,#GenericApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//   61     GenericApp_TransID = 0;
        MOV     DPTR,#GenericApp_TransID
        CLR     A
        MOVX    @DPTR,A
//   62 
//   63     GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
        MOV     DPTR,#GenericApp_epDesc
        MOV     A,#0xa
        MOVX    @DPTR,A
//   64     GenericApp_epDesc.task_id = &GenericApp_TaskID;
        INC     DPTR
        MOV     A,#GenericApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(GenericApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//   65     GenericApp_epDesc.simpleDesc
//   66         = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
        INC     DPTR
        MOV     A,#GenericApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(GenericApp_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//   67 
//   68     GenericApp_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//   69     afRegister( &GenericApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#GenericApp_epDesc & 0xff
        MOV     R3,#(GenericApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//   70 
//   71     uartconfig.configured   = TRUE;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//   72     uartconfig.baudRate     = HAL_UART_BR_9600;
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//   73     uartconfig.flowControl  = FALSE;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//   74 	uartconfig.callBackFunc = rxCB;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??rxCB?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??rxCB?relay >> 8) & 0xff
        MOVX    @DPTR,A
//   75     HalUARTOpen(UART_PORT, &uartconfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTOpen?relay
//   76 }
        MOV     A,#0x1d
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 9)
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//   77 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   78 UINT16 GenericApp_ProcessEvent( byte task_id, UINT16 events )
GenericApp_ProcessEvent:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function GenericApp_ProcessEvent
        CODE
//   79 {
        FUNCALL GenericApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, GenericApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, GenericApp_SendTheUart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//   80     afIncomingMSGPacket_t *MSGpkt;
//   81 
//   82     if ( events & SYS_EVENT_MSG )
        MOV     A,R3
        ANL     A,#0x80
        JZ      ??GenericApp_ProcessEvent_0
//   83     {
//   84         MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??GenericApp_ProcessEvent_1
//   85         while ( MSGpkt )
//   86         {
//   87             switch ( MSGpkt->hdr.event )
//   88             {
//   89                 case AF_INCOMING_MSG_CMD:
//   90                     GenericApp_MessageMSGCB(MSGpkt);
//   91                     break;
//   92                 case ZDO_STATE_CHANGE:
//   93                     GenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??GenericApp_ProcessEvent_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#GenericApp_NwkState
        MOVX    @DPTR,A
//   94                     if(GenericApp_NwkState == DEV_END_DEVICE)
//   95                     {
//   96                         //GenericApp_SendTheMessage();
//   97                     }
//   98                     break;
//   99                 default:
//  100                     break;
//  101             }
//  102             osal_msg_deallocate( (uint8 *)MSGpkt );
??GenericApp_ProcessEvent_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
//  103             MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??GenericApp_ProcessEvent_1:
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
        MOV     A,R6
        ORL     A,R7
        JZ      ??GenericApp_ProcessEvent_4
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??GenericApp_ProcessEvent_5
        ADD     A,#0x49
        JZ      ??GenericApp_ProcessEvent_2
        SJMP    ??GenericApp_ProcessEvent_3
??GenericApp_ProcessEvent_5:
        ; Setup parameters for call to function GenericApp_MessageMSGCB
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??GenericApp_MessageMSGCB?relay
        SJMP    ??GenericApp_ProcessEvent_3
//  104         }
//  105 
//  106         // return unprocessed events
//  107         return (events ^ SYS_EVENT_MSG);
??GenericApp_ProcessEvent_4:
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        XRL     A,#0x80
        MOV     R3,A
        SJMP    ??GenericApp_ProcessEvent_6
//  108     }
//  109 
//  110 	if(events & USR_EVENT_UART)
??GenericApp_ProcessEvent_0:
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        JNC     ??GenericApp_ProcessEvent_7
//  111 	{
//  112 		if(uartbuf_len > 0)
        MOV     DPTR,#uartbuf_len
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??GenericApp_ProcessEvent_8
//  113 		{
//  114 			GenericApp_SendTheUart(uartbuf, uartbuf_len);
        ; Setup parameters for call to function GenericApp_SendTheUart
        MOV     DPTR,#uartbuf_len
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,#uartbuf & 0xff
        MOV     R3,#(uartbuf >> 8) & 0xff
        LCALL   ??GenericApp_SendTheUart?relay
//  115 			uartbuf_len = 0;
        MOV     DPTR,#uartbuf_len
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  116 		}
//  117 		osal_stop_timerEx(GenericApp_TaskID, USR_EVENT_UART);
??GenericApp_ProcessEvent_8:
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
//  118 		return (events ^ USR_EVENT_UART);
        MOV     A,?V0 + 0
        XRL     A,#0x1
        MOV     R2,A
        MOV     R3,?V0 + 1
        SJMP    ??GenericApp_ProcessEvent_6
//  119 	}
//  120     
//  121     return 0;
??GenericApp_ProcessEvent_7:
        MOV     R2,#0x0
        MOV     R3,#0x0
??GenericApp_ProcessEvent_6:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  122 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  123 void GenericApp_MessageMSGCB(afIncomingMSGPacket_t *pkt)
GenericApp_MessageMSGCB:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function GenericApp_MessageMSGCB
        CODE
//  124 {
        FUNCALL GenericApp_MessageMSGCB, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 143, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 143, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_MessageMSGCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 146, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 146, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 143, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 143, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 128
        MOV     A,#-0x80
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 143)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  125     unsigned char buf[128];
//  126 
//  127     switch ( pkt->clusterId )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??GenericApp_MessageMSGCB_0
        INC     DPTR
        MOVX    A,@DPTR
??GenericApp_MessageMSGCB_0:
        JZ      $+5
        LJMP    ??GenericApp_MessageMSGCB_1 & 0xFFFF
//  128     {
//  129         case GENERICAPP_CLUSTERID:
//  130             osal_memset(buf, 0 , pkt->cmd.DataLength);
        MOV     A,R6
        ADD     A,#0x1f
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
        ; Setup parameters for call to function osal_memset
        MOV     DPL,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
//  131             osal_memcpy(buf, pkt->cmd.Data,  pkt->cmd.DataLength);
        MOV     A,R6
        ADD     A,#0x21
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 146)
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 143)
//  132 
//  133             if(pkt->cmd.DataLength > 4)
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,#0x5
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x0
        JC      ??GenericApp_MessageMSGCB_2
//  134 			{
//  135 	            dst_short_addr =   pkt->cmd.Data[0];
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     DPTR,#dst_short_addr
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  136 				dst_short_addr += (pkt->cmd.Data[1]<<8);
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#dst_short_addr
        MOVX    A,@DPTR
        ADD     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        ADDC    A,R1
        MOVX    @DPTR,A
//  137 			}
//  138 			
//  139             //GenericApp_Loop(buf, pkt->cmd.DataLength);
//  140 	    HalUARTWrite(UART_PORT, buf+4, pkt->cmd.DataLength-4);
??GenericApp_MessageMSGCB_2:
        ; Setup parameters for call to function HalUARTWrite
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        ADD     A,#-0x4
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOV     R5,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  141             
//  142             break;
//  143     }
//  144 }
??GenericApp_MessageMSGCB_1:
        MOV     A,#-0x80
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  145 
//  146 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  147 void GenericApp_SendTheUart(unsigned char *buf, int len)
GenericApp_SendTheUart:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function GenericApp_SendTheUart
        CODE
//  148 {
        FUNCALL GenericApp_SendTheUart, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 155, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 155, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_SendTheUart, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 158, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 158, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_SendTheUart, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 164, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 164, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 144
        MOV     A,#0x70
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 155)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  149     unsigned char snd_buf[UART_BUF_SIZE + 4];
//  150     unsigned char *p;
//  151     afAddrType_t devDstAddr;
//  152 
//  153     devDstAddr.addrMode=(afAddrMode_t)Addr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  154     devDstAddr.endPoint=GENERICAPP_ENDPOINT;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine0 & 0xFFFF
//  155     devDstAddr.addr.shortAddr=dst_short_addr;
//  156 
//  157     g_nwt_addr.short_addr = NLME_GetShortAddr();
//  158     p = (unsigned char *)&(g_nwt_addr.short_addr);
//  159     snd_buf[0] = *p;
??CrossCallReturnLabel_0:
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
//  160     snd_buf[1] = *(p+1);
        MOV     DPTR,#g_nwt_addr + 1
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  161 
//  162     p = (unsigned char *)&dst_short_addr;
//  163     snd_buf[2] = *p;
        MOV     DPTR,#dst_short_addr
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  164     snd_buf[3] = *(p+1);
        MOV     DPTR,#dst_short_addr + 1
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  165 
//  166     osal_memcpy(snd_buf+4, buf, len);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 158)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 155)
//  167 
//  168     AF_DataRequest(&devDstAddr,
//  169                    &GenericApp_epDesc,
//  170                    GENERICAPP_CLUSTERID,
//  171                    len+4,
//  172                    snd_buf,
//  173                    &GenericApp_TransID,
//  174                    AF_DISCV_ROUTE,
//  175                    AF_DEFAULT_RADIUS);
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 156)
        MOV     ?V0 + 0,#GenericApp_TransID & 0xff
        MOV     ?V0 + 1,#(GenericApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 158)
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 160)
        MOV     A,R6
        ADD     A,#0x4
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 162)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 164)
        MOV     R1,#0x20
        MOV     R4,#GenericApp_epDesc & 0xff
        MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 155)
//  176 
//  177 
//  178 }
        MOV     A,#-0x70
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3
//  179 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  180 static void rxCB(uint8 port, uint8 event)
rxCB:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function rxCB
        CODE
//  181 {
        FUNCALL rxCB, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  182 	uint16 numread = 0;
//  183 	numread = HalUARTRead(port, uartbuf+uartbuf_len, UART_READ_NUM);
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     DPTR,#uartbuf_len
        MOVX    A,@DPTR
        ADD     A,#uartbuf & 0xff
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#(uartbuf >> 8) & 0xff
        MOV     R3,A
        LCALL   ??HalUARTRead?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
//  184 	if(numread > 0)
        MOV     A,R0
        ORL     A,R1
        JZ      ??rxCB_0
//  185 	{
//  186 		uartbuf_len += numread;
        MOV     DPTR,#uartbuf_len
        MOVX    A,@DPTR
        ADD     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOVX    @DPTR,A
//  187 		osal_start_timerEx(GenericApp_TaskID, USR_EVENT_UART, 10);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0xa
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  188 		
//  189 	}
//  190 	
//  191 }
??rxCB_0:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock4
//  192 
//  193 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  194 void GenericApp_Loop(unsigned char *buf, int len)
GenericApp_Loop:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function GenericApp_Loop
        CODE
//  195 {
        FUNCALL GenericApp_Loop, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Loop, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
//  196 	unsigned char *p;
//  197 	
//  198     afAddrType_t devDstAddr;
//  199     devDstAddr.addrMode=(afAddrMode_t)Addr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  200     devDstAddr.endPoint=GENERICAPP_ENDPOINT;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine0 & 0xFFFF
//  201     devDstAddr.addr.shortAddr=dst_short_addr;
//  202 
//  203 	g_nwt_addr.short_addr = NLME_GetShortAddr();
//  204     p = (unsigned char *)&(g_nwt_addr.short_addr);
//  205     buf[0] = *p;
??CrossCallReturnLabel_1:
        MOV     DPTR,#g_nwt_addr
        MOVX    A,@DPTR
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    @DPTR,A
//  206     buf[1] = *(p+1);
        MOV     DPTR,#g_nwt_addr + 1
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_4:
        MOVX    @DPTR,A
//  207 
//  208     p = (unsigned char *)&dst_short_addr;
//  209     buf[2] = *p;
        MOV     DPTR,#dst_short_addr
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_2:
        MOVX    @DPTR,A
//  210     buf[3] = *(p+1);
        MOV     DPTR,#dst_short_addr + 1
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_3:
        INC     DPTR
        MOVX    @DPTR,A
//  211 
//  212     AF_DataRequest(&devDstAddr,
//  213                    &GenericApp_epDesc,
//  214                    GENERICAPP_CLUSTERID,
//  215                    len,
//  216                    buf,
//  217                    &GenericApp_TransID,
//  218                    AF_DISCV_ROUTE,
//  219                    AF_DEFAULT_RADIUS);
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 4,#0x1e
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     ?V0 + 4,#GenericApp_TransID & 0xff
        MOV     ?V0 + 5,#(GenericApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     R1,#0x20
        MOV     R4,#GenericApp_epDesc & 0xff
        MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 26)
//  220 	
//  221 
//  222 }
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond6 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiPicker8 Using cfiCommon1
        CFI (cfiPicker8) NoFunction
        CFI (cfiPicker8) Picker
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_5:
        INC     DPTR
        RET
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiPicker8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond9 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_5, ??CrossCallReturnLabel_2
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_5, ??CrossCallReturnLabel_3
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        MOVX    A,@DPTR
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        RET
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 155)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiPicker15 Using cfiCommon1
        CFI (cfiPicker15) NoFunction
        CFI (cfiPicker15) Picker
        MOV     A,#0xa
        MOVX    @DPTR,A
        MOV     DPTR,#dst_short_addr
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        ; Setup parameters for call to function NLME_GetShortAddr
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     DPTR,#g_nwt_addr
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiPicker15

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GenericApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GenericApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GenericApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_SendTheUart?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GenericApp_SendTheUart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_Loop?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GenericApp_Loop

        END
//  223 
//  224 /*
//  225 void uart_cmd(unsigned char *buf, int len)
//  226 {
//  227 	uint8 cmd = 0;
//  228 	uint16 short_addr = 0;
//  229 	if(len < 0 )
//  230 		return ;
//  231 
//  232 	cmd = buf[0];
//  233 
//  234 	switch(cmd)
//  235 	{
//  236 	case UART_CMD_SND:
//  237 		GenericApp_SendTheUart(uartbuf+1, uartbuf_len-1);
//  238 		break;
//  239 	case UART_CMD_TSA:
//  240 		g_nwt_addr.short_addr = NLME_GetShortAddr();
//  241 		HalUARTWrite(UART_PORT, (unsigned char*)&g_nwt_addr.short_addr, sizeof(uint16));
//  242 		break;
//  243 	case UART_CMD_TEA:
//  244 		g_nwt_addr.ext_addr = NLME_GetExtAddr();
//  245 		HalUARTWrite(UART_PORT, g_nwt_addr.ext_addr, 64);
//  246 		break;
//  247 	case UART_CMD_TPSA:
//  248 		g_nwt_addr.parent_short_addr = NLME_GetShortAddr();
//  249 		HalUARTWrite(UART_PORT, (unsigned char*)&g_nwt_addr.parent_short_addr, sizeof(uint16));
//  250 		break;
//  251 	case UART_CMD_TPEA:
//  252 		NLME_GetCoordExtAddr(g_nwt_addr.parent_ext_addr);
//  253 		HalUARTWrite(UART_PORT, g_nwt_addr.parent_ext_addr, 64);
//  254 		break;
//  255 	}
//  256 	
//  257 	osal_memset(uartbuf, 0, uartbuf_len);
//  258 	uartbuf_len = 0;
//  259 	
//  260 }
//  261 */
// 
// 951 bytes in segment BANKED_CODE
//  36 bytes in segment BANK_RELAYS
//  14 bytes in segment XDATA_ROM_C
// 149 bytes in segment XDATA_Z
// 
// 987 bytes of CODE  memory
//  14 bytes of CONST memory
// 149 bytes of XDATA memory
//
//Errors: none
//Warnings: none
